import json
import traceback
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from models.chat import ChatSession, Message, CustomerInfo
from llm.llm import RAGModel
from config.redis_cache import cache_set
from google.oauth2.service_account import Credentials
from models.knowledge_base import KnowledgeBase
import gspread
from config.database import SessionLocal
import os

client = None
sheet = None

def init_gsheets(db=None, force=False):
    """Kh·ªüi t·∫°o client + sheet (lazy init)."""
    global client, sheet
    if client and sheet and not force:
        return

    try:
        # N·∫øu ch∆∞a c√≥ session th√¨ t·ª± t·∫°o
        if db is None:
            db = SessionLocal()

        json_path = os.getenv('GSHEET_SERVICE_ACCOUNT', '/app/config_sheet.json')
        if not os.path.exists(json_path):
            print(f"‚ö†Ô∏è GSheet config not found at {json_path}")
            client = None
            sheet = None
            return

        creds = Credentials.from_service_account_file(
            json_path,
            scopes=["https://www.googleapis.com/auth/spreadsheets"]
        )
        client = gspread.authorize(creds)

        # ‚úÖ Truy v·∫•n KnowledgeBase.id = 1 t·ª´ DB
        kb = db.query(KnowledgeBase).filter(KnowledgeBase.id == 1).first()
        if not kb:
            print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y KnowledgeBase id=1 trong database.")
            sheet = None
            return

        spreadsheet_id = kb.customer_id
        print("DEBUG: spreadsheet_id =", spreadsheet_id)
        if not spreadsheet_id:
            print("‚ö†Ô∏è spreadsheet_id is None ho·∫∑c r·ªóng. Kh√¥ng th·ªÉ m·ªü Sheet.")
            sheet = None
            return

        # M·ªü Google Sheets
        sheet = client.open_by_key(spreadsheet_id).sheet1
        print(f"‚úÖ Google Sheets initialized: {sheet.title}")

    except Exception as e:
        print(f"‚ö†Ô∏è Google Sheets not initialized: {e}")
        client = None
        sheet = None
    finally:
        if db:
            db.close()

# G·ªçi init khi module load (tu·ª≥ b·∫°n c√≥ mu·ªën)
init_gsheets()


def add_customer(customer_data: dict, db: Session):
    global sheet
    # N·∫øu sheet ch∆∞a c√≥, c·ªë kh·ªüi t·∫°o l·∫°i
    if sheet is None:
        print("‚ö†Ô∏è sheet is None, th·ª≠ kh·ªüi t·∫°o l·∫°i Google Sheets...")
        init_gsheets()
        if sheet is None:
            print("‚ö†Ô∏è Google Sheets v·∫´n kh√¥ng kh·∫£ d·ª•ng. B·ªè qua vi·ªác sync l√™n Sheets.")
            return

    try:
        from services.field_config_service import get_all_field_configs_service

        field_configs = get_all_field_configs_service(db)
        field_configs.sort(key=lambda x: x.excel_column_letter)

        if not field_configs:
            print("Ch∆∞a c√≥ c·∫•u h√¨nh c·ªôt n√†o. B·ªè qua vi·ªác th√™m v√†o Sheet.")
            return

        headers = [config.excel_column_name for config in field_configs]

        # X√¢y row: n·∫øu key kh√¥ng kh·ªõp, th·ª≠ c√°c ph∆∞∆°ng √°n kh√°c
        row = []
        has_all_required = True
        for config in field_configs:
            value = customer_data.get(config.excel_column_name)
            if value is None:
                # th·ª≠ fallback n·∫øu t√™n tr∆∞·ªùng kh√°c
                value = customer_data.get(config.excel_column_letter) or customer_data.get('name') or ""
            if value in (None, "None", "null"):
                value = ""
            value_str = str(value).strip()
            if config.is_required and value_str == "":
                has_all_required = False
            row.append(value_str)


        try:
            current_headers = sheet.row_values(1)
        except Exception as e:
            print("‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c header hi·ªán t·∫°i:", e)
            current_headers = []

        if current_headers != headers:
            try:
                sheet.clear()
                sheet.insert_row(headers, 1)
                print("‚úÖ C·∫≠p nh·∫≠t header tr√™n Sheet.")
            except Exception as e:
                print("‚ö†Ô∏è L·ªói khi ghi header:", e)
                # th·ª≠ append l√†m ng√°ch
                try:
                    sheet.append_row(headers)
                except Exception as e2:
                    print("‚ö†Ô∏è V·∫´n l·ªói khi th√™m header:", e2)
        # Ch·ªâ append n·∫øu c√≥ √≠t nh·∫•t 1 √¥ kh√¥ng r·ªóng
        if any(cell.strip() for cell in row):
            if has_all_required:
                try:
                    sheet.append_row(row, value_input_option='USER_ENTERED')
                    print("‚úÖ ƒê√£ th√™m row v√†o Google Sheets.")
                except Exception as e:
                    print("‚ö†Ô∏è L·ªói khi append row:", e)
        else:
            print("‚ö†Ô∏è B·ªè qua: row ho√†n to√†n r·ªóng (kh√¥ng c√≥ d·ªØ li·ªáu).")

    except Exception as e:
        print(f"L·ªói khi th√™m customer v√†o Sheet: {e}")

async def extract_customer_info_background(session_id: int, db, manager):
    """Background task ƒë·ªÉ thu th·∫≠p th√¥ng tin kh√°ch h√†ng"""
    try:
        
        
        rag = RAGModel(db_session=db)
        extracted_info = rag.extract_customer_info_realtime(session_id, limit_messages=15)
        
        print("EXTRACTED JSON RESULT:", extracted_info)
        if extracted_info:
            customer_data = json.loads(extracted_info)
            has_useful_info = any(
                        v is not None and v != "" and v != "null" and v is not False
                        for v in customer_data.values()
                    )
            
            if has_useful_info:
                # Ki·ªÉm tra xem ƒë√£ c√≥ th√¥ng tin kh√°ch h√†ng n√†y ch∆∞a
                existing_customer = db.query(CustomerInfo).filter(
                    CustomerInfo.chat_session_id == session_id
                ).first()
                
                should_set_alert = False  # ‚úÖ Flag ƒë·ªÉ x√°c ƒë·ªãnh c√≥ n√™n set alert kh√¥ng
                final_customer_data = None
                
                if existing_customer:
                    # C·∫≠p nh·∫≠t th√¥ng tin hi·ªán c√≥ v·ªõi th√¥ng tin m·ªõi
                    existing_data = existing_customer.customer_data or {}
                    
                    # Merge data: ∆∞u ti√™n th√¥ng tin m·ªõi n·∫øu kh√¥ng null
                    updated_data = existing_data.copy()
                    has_new_info = False
                    
                    for key, value in customer_data.items():
                        if value is not None and value != "" and value != "null":
                            if key not in existing_data or existing_data[key] != value:
                                updated_data[key] = value
                                has_new_info = True
                    
                    existing_customer.customer_data = updated_data
                    final_customer_data = updated_data
                    print(f"üìù C·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng {session_id}: {updated_data}")
                    print(f"DEBUG: has_new_info = {has_new_info}")
                    # ‚úÖ Ch·ªâ set alert n·∫øu c√≥ th√¥ng tin m·ªõi
                    if has_new_info:
                        should_set_alert = True
                else:
                    # T·∫°o m·ªõi n·∫øu ch∆∞a c√≥
                    customer = CustomerInfo(
                        chat_session_id=session_id,
                        customer_data=customer_data
                    )
                    db.add(customer)
                    final_customer_data = customer_data
                    should_set_alert = True
                    print(f"üÜï T·∫°o m·ªõi th√¥ng tin kh√°ch h√†ng {session_id}: {customer_data}")
                
            # ‚úÖ Set alert n·∫øu c·∫ßn
                if should_set_alert:
                    chat_session = db.query(ChatSession).filter(ChatSession.id == session_id).first()
                    if chat_session:
                        chat_session.alert = "true"

                db.commit()
                if  should_set_alert and final_customer_data:
                    try:
                        add_customer(final_customer_data, db)
                        print(f"üìä ƒê√£ sync customer {session_id} l√™n Google Sheets")
                    except Exception as sheet_error:
                        print(f"‚ö†Ô∏è L·ªói khi sync l√™n Google Sheets: {sheet_error}")
                
                # ‚úÖ G·ª≠i WebSocket n·∫øu c√≥ th√¥ng tin c·∫ßn c·∫≠p nh·∫≠t
                if should_set_alert and final_customer_data:
                    customer_update = {
                        "chat_session_id": session_id,
                        "customer_data": final_customer_data,
                        "type": "customer_info_update"
                    }
                    await manager.broadcast_to_admins(customer_update)
                    print(f"üì° ƒê√£ g·ª≠i customer_info_update cho session {session_id}")
                
                
    except Exception as extract_error:
        print(f"L·ªói khi tr√≠ch xu·∫•t th√¥ng tin background: {extract_error}")


async def save_message_to_db_async(data: dict, sender_name: str, image_url: list, db: Session):
    try:
        message = Message(
            chat_session_id=data.get("chat_session_id"),
            sender_type=data.get("sender_type"),
            content=data.get("content"),
            sender_name=sender_name,
            image=json.dumps(image_url) if image_url else None
        )
        db.add(message)
        db.commit()
        print(f"‚úÖ ƒê√£ l∆∞u tin nh·∫Øn ID: {message.id}")
        
    except Exception as e:
        print(f"‚ùå L·ªói l∆∞u tin nh·∫Øn: {e}")
        traceback.print_exc()
        db.rollback()


async def update_session_admin_async(chat_session_id: int, sender_name: str, db: Session):
    """C·∫≠p nh·∫≠t session khi admin reply b·∫•t ƒë·ªìng b·ªô"""
    try:
        db_session = db.query(ChatSession).filter(ChatSession.id == chat_session_id).first()
        if db_session:
            db_session.status = "false"
            db_session.time = datetime.now() + timedelta(hours=1)
            db_session.previous_receiver = db_session.current_receiver
            db_session.current_receiver = sender_name
            db.commit()
            
            # C·∫≠p nh·∫≠t cache
            session_cache_key = f"session:{chat_session_id}"
            session_data = {
                'id': db_session.id,
                'name': db_session.name,
                'status': db_session.status,
                'channel': db_session.channel,
                'page_id': db_session.page_id,
                'current_receiver': db_session.current_receiver,
                'previous_receiver': db_session.previous_receiver,
                'time': db_session.time.isoformat() if db_session.time else None
            }
            cache_set(session_cache_key, session_data, ttl=300)
            
    except Exception as e:
        print(f"‚ùå L·ªói c·∫≠p nh·∫≠t session: {e}")
